// 原本的寫法太耗時，參考別人的發現可以用is_safe儲存訪問狀態，這樣會快很多
class Solution {
private:
    bool DFS(vector<vector<int>>& graph, int node, vector<int>& is_safe){
        for(auto sub_node : graph[node]){
            // situation of sunodes
            if(is_safe[sub_node]== 1){
                continue;
            }
            if(is_safe[sub_node]== -1){ // sub is unsafe
                is_safe[node]= -1;
                return false;
            }
            if(is_safe[sub_node]== 0){ //sub not visited
                is_safe[sub_node]= -1;
                if(!DFS(graph, sub_node, is_safe)){ //if sub unsafe
                    is_safe[node]= -1; //this node is also unsafe
                    return false;
                }
            }
        }
        is_safe[node]= 1; // if not returned, it means this node is safe
        return true;
    }
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n= graph.size();
        vector<int> ans;
        vector<int> is_safe(n, 0); // 0=notvisit, 1=safe, -1=visiting/notsafe
        // terminal
        for(int i= 0; i< n; i++){
            if(graph[i].empty())
                is_safe[i]= 1;
        }
        // safe
        for(int i= 0; i< n; i++){
            if(is_safe[i]== 0){
                is_safe[i]= -1;
                if(DFS(graph, i, is_safe))
                    is_safe[i]= 1;
            }
        }
        // output
        for(int i= 0; i< n; i++){
            if(is_safe[i]== 1){
                ans.push_back(i);
            }
        }
        return ans;
    }
};
